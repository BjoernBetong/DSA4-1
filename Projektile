//Skript das Suchen und Wiederverwerten von Projektilen (Pfeile, Speere, Bolzen, etc.)


main();
async function main() {
    //Überprüfe, ob ein Held ausgewählt wurde
    if (canvas.tokens.controlled.length === 0 || canvas.tokens.controlled.length > 1) {
        ui.notifications.error("Bitte einen Helden auswählen.");
        return;
    };
    if (game.user.targets.size > 1) {
        ui.notifications.error("Bitte nur einen Helden anvisieren.");
        return;
    };
    
	//gewählter Held
    if(game.user.targets.size === 1){
        targetActor = game.user.targets.values().next().value.actor;
        targetName = targetActor.name;
    }else{
        targetActor = "";
        targetName = "";
	};

	
	//Abrufen des hinterlegten Würfelsystems
    const rollMode = game.settings.get('core', 'rollMode');


//###############################################################################################################################################################################################################################################

	//Name des gewählten Helden
		const tokenName = token.actor.name;

	//Eigenschaften des Helden	
		const courage = token.actor.system.base.basicAttributes.courage.value;																														//Mut				MU
		const cleverness = token.actor.system.base.basicAttributes.cleverness.value;																												//Klugheit			KL
		const intuition = token.actor.system.base.basicAttributes.intuition.value;																													//Intuition			IN
		const charisma = token.actor.system.base.basicAttributes.charisma.value;																													//Charisma			CH
		const dexterity = token.actor.system.base.basicAttributes.dexterity.value;																													//Fingerfertigkeit	FF
		const agility = token.actor.system.base.basicAttributes.agility.value;																														//Gewandheit		GE
		const constitution = token.actor.system.base.basicAttributes.constitution.value;																											//Konstitution		KO
		const strength = token.actor.system.base.basicAttributes.strength.value;																													//Körperkraft		KK
		const magicResistance = token.actor.system.base.combatAttributes.passive.magicResistance.value; 																							//Magieresistenz	MR
		const astralEnergy = token.actor.system.base.resources.astralEnergy.value;																													//Astralenergie		AE

	//Talente des Helden
		const Sinnenschaerfe = token.actor.items.find(item => item.name === "Sinnenschärfe");																										//Suche nach dem Talent "Sinnenschärfe"
		const SinnenschaerfeValue = (Sinnenschaerfe === undefined)? isNaN : (Sinnenschaerfe.system.value === null)? 0 : Sinnenschaerfe.system.value;												//Abrufen des TaW des Talents "Sinnenschärfe"

//###############################################################################################################################################################################################################################################

    //allgemeine Dialogoptionen
		const hr = "<hr>";
		const divFlexStart = "<div style='display:flex'><span style='flex:1'>";
		const divFlexEnd = "</span></div>";
		const divInputNumber = "type='number' style='width:50px;float:right' value='";
		const divInputBox = "type='checkbox' style='width:70px;float:right' ";
		const divInputUnchecked = "/>";
		const divInputChecked = "checked />";
	
//###############################################################################################################################################################################################################################################    

//Dialoge
	//Wiederverwertung von Geschossen und Wurfgeschossen
	headerDialog = "<h2><b><i>" + tokenName + "</b></i><br>will die (Wurf-)Geschosse suchen und wiederverwerten" + "</h2>";
    inputDialog = headerDialog;
	inputDialog += divFlexStart + `
			<form action"#">
                 <label for="SelectAmmo">Art der Projektile:</label>
                 <select name="SelectAmmo" id="SelectAmmo" style="float:right">
					<option value="0">Armbrustbolzen</option>
					<option value="1">Diskusse</option>
					<option value="2">Pfeile</option>
					<option value="3">Wurfbeile</option>
					<option value="4">Wurfmesser</option>
					<option value="5">Wurfspeere</option>
					</select>
            </form>
        `+ divFlexEnd
	inputDialog += divFlexStart + "Anzahl der Projektile<input id='projectile'" + divInputNumber  + "0'/>" + divFlexEnd;		
	inputDialog += divFlexStart + "Wie viele Projektile haben getroffen?<input id='projectileHit'" + divInputNumber  + "0'/>" + divFlexEnd;		
	inputDialog += divFlexStart + "Erschwernis der Sinnenschärfe (Meisterentscheid)<input id='Difficulty'" + divInputNumber  + "0'/>" + divFlexEnd;		
//###############################################################################################################################################################################################################################################	

//Probenwurf
	new Dialog({
        title: "Projektilsuche",
        content: inputDialog + hr,
        buttons: {
            close: {
                icon: '<i class="fas fa-times"></i>', label: "Schließen"
            }, 
            accept: {
                icon: '<i class="fas fa-check"></i>', label: "Würfeln", callback: htmlCallback
            }  
        },
		default: "accept",
        render: () => console.log(),
        close: () => console.log()
    }).render(true);
	
    async function htmlCallback(html){
		
		//Input Boxes
		const AmmoInput = Number(html.find("#SelectAmmo")[0]?.value || 0);				//Auswahl eines Wertes für das Dropdown-Menü
		const projectileInput = Number(html.find("#projectile")[0]?.value || 0);		
		const projectileHitInput = Number(html.find("#projectileHit")[0]?.value || 0);		
		const DifficultyInput = Number(html.find("#Difficulty")[0]?.value || 0);		

	if(projectileInput < projectileHitInput) {
		ui.notifications.error("Eingabe prüfen, es haben mehr Projektile getroffen als verschossen wurden");
		return;
	};

	switch(AmmoInput){
		case 0:
			kind = "Armbrustbolzen";
			successValueMiss = 5;
			successValueHit = 3;
			break;
		case 1:
			kind = "Diskusse";
			successValueMiss = 6;
			successValueHit = 5;
			break;
		case 2:
			kind = "Pfeile";
			successValueMiss = 4;
			successValueHit = 2;
			break;
		case 3:
			kind = "Wurfbeile";
			successValueMiss = 6;
			successValueHit = 6;
			break;
		case 4:
			kind = "Wurfmesser";
			successValueMiss = 6;
			successValueHit = 5;
			break;
		case 5:
			kind = "Wurfspeere";
			successValueMiss = 6;
			successValueHit = 6;
			break;
		}
	
		//Roll the dice
        talentRoll = new Roll("3d20").roll({async: true});
        talentRoll.then(roll =>{
			let w1 = roll.terms[0].results[0].result;
			let w2 = roll.terms[0].results[1].result;
			let w3 = roll.terms[0].results[2].result;
			
		TaW = SinnenschaerfeValue;
		
			mod = DifficultyInput
			modOutput = (mod >=0)? "+" + mod: mod;
		
			eTaW = TaW;
			eTaWMod = eTaW - mod;
			resOne = cleverness - w1;
			resOne += (eTaWMod < 0)? eTaWMod: 0;
			resTwo = intuition - w2;
			resTwo += (eTaWMod < 0)? eTaWMod: 0;
			resThree = intuition - w3;
			resThree += (eTaWMod < 0)? eTaWMod: 0;
			TalentResult = (eTaWMod > 0)? eTaWMod : 0;
			TalentResult += (resOne < 0)? resOne : 0;
			TalentResult += (resTwo < 0)? resTwo : 0;
			TalentResult += (resThree < 0)? resThree : 0;
			TalentResult = (TalentResult == 0)? 1 : TalentResult;
			TalentResult = Math.min(TalentResult,eTaW);

            luck = (TalentResult >= 0)? "Erfolg":"Misserfolg";
            wSum1 = w1 + w2
            wSum2 = w1 + w3
            wSum3 = w2 + w3
            wSum4 = w1 + w2 + w3
            if(wSum1 == 2 || wSum2 == 2 || wSum3 == 2){
                if(wSum4 == 3){
                    luck = "Spektakulärer Erfolg";
                }else{
                    luck = "Glücklicher Erfolg";
                };
            };
            if(wSum1 == 40 || wSum2 == 40 || wSum3 == 40){
                if(wSum4 == 60){
                    luck = "Spektakulärer Patzer";
                }else{
                    luck = "Patzer";
                };
            };

		//Anzahl der Iterationen festlegen
		MissNumber = (projectileInput - projectileHitInput);
		HitNumber = projectileHitInput;
		
		//Startbedingungen festlegen
		SumMissArrows = 0;
		SumHitArrows =  0;
		let ResultMissArrows;
		let ResultHitArrows;
		
			//Loop-Start, Projektile, die das Ziel verfehlt haben
			for(let i_Miss = 0; i_Miss < MissNumber; i_Miss++){
				//W6-Wurf
				ResultMissArrows = Math.floor(Math.random() * 6) + 1;
					//Überprüfen, ob das Projektil wiederverwendbar ist
					if(ResultMissArrows < successValueMiss){
						ResultMissArrows = 1;
					}else{
						ResultMissArrows = 0;
					}
				//Aufsummieren der wiedergefundenen Projektile, die das Ziel verfehlt haben
				SumMissArrows += ResultMissArrows;
			}

			//Loop-Start, Projektile, die das Ziel getroffen haben
			for(let i_Hit = 0; i_Hit < HitNumber; i_Hit++){
				//W6-Wurf
				ResultHitArrows = Math.floor(Math.random() * 6) + 1;
					//Überprüfen, ob das Projektil wiederverwendbar ist
					if(ResultHitArrows < successValueHit){
						ResultHitArrows = 1;
					}else{
						ResultHitArrows = 0;
					}
				//Aufsummieren der wiedergefundenen Projektile, die das Ziel getroffen haben
				SumHitArrows += ResultHitArrows;
			}
		
		//Wie viele Projektile können insgesamt gefunden und wiederverwertet werden
			outcome = SumMissArrows + SumHitArrows;
		
		//Bezeichnung der Projektile
			if(AmmoInput === 0 || AmmoInput === 4){
				projectilekind = kind;
			}if(AmmoInput === 1){
				if(outcome > 1){
					projectilekind = "Diskusse";
				}else{
					projectilekind = "Diskus";
				}
			}if(AmmoInput === 2){
				if(outcome > 1){
					projectilekind = "Pfeile";
				}else{
					projectilekind = "Pfeil";
				}
			}if(AmmoInput === 3){
				if(outcome > 1){
					projectilekind = "Wurfbeile";
				}else{
					projectilekind = "Wurfbeil";
				}
			}if(AmmoInput === 5){
				if(outcome > 1){
					projectilekind = "Wurfspeere";
				}else{
					projectilekind = "Wurfspeer";
				}
			}

		//Chat Output
			if(TalentResult > 0 && outcome > 0){
				flavor = "<b>" + tokenName + "</b> findet " + outcome + " verwendbare " + projectilekind + " wieder";
			}else{
				flavor = "<b>" + tokenName + "</b> findet keine verwendbaren " + kind + " wieder";
			}
			
            roll.toMessage ({
                flavor: flavor,
                speaker: ChatMessage.getSpeaker({token: token.document})
            },
            {rollMode}
            );
			
	})
	};
}
