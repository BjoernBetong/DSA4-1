//Skript für die Nachtwache

main();
async function main() {
   
	
	//Abrufen des hinterlegten Würfelsystems
    const rollMode = game.settings.get('core', 'rollMode');


//###############################################################################################################################################################################################################################################

	//Name des gewählten Helden
		const tokenName = token.actor.name;

	//Eigenschaften des Helden	
		const courage = token.actor.system.base.basicAttributes.courage.value;																									//Mut				MU
		const cleverness = token.actor.system.base.basicAttributes.cleverness.value;																							//Klugheit			KL
		const intuition = token.actor.system.base.basicAttributes.intuition.value;																								//Intuition			IN
		const charisma = token.actor.system.base.basicAttributes.charisma.value;																								//Charisma			CH
		const dexterity = token.actor.system.base.basicAttributes.dexterity.value;																								//Fingerfertigkeit	FF
		const agility = token.actor.system.base.basicAttributes.agility.value;																									//Gewandheit		GE
		const constitution = token.actor.system.base.basicAttributes.constitution.value;																						//Konstitution		KO
		const strength = token.actor.system.base.basicAttributes.strength.value;																								//Körperkraft		KK
		const magicResistance = token.actor.system.base.combatAttributes.passive.magicResistance.value; 																		//Magieresistenz	MR
		const astralEnergy = token.actor.system.base.resources.astralEnergy.value;																								//Astralenergie		AE

	//Talente des Helden
		const Selbstbeherrschung = token.actor.items.find(item => item.name === "Selbstbeherrschung");																			//Suche nach dem Talent "Selbstbeherrschung"
		const SelbstbeherrschungValue = (Selbstbeherrschung === undefined)? isNaN : (Selbstbeherrschung.system.value === null)? 0 : Selbstbeherrschung.system.value;			//Abrufen des TaW des Talents "Selbstbeherrschung"
		const Sinnenschaerfe = token.actor.items.find(item => item.name === "Sinnenschärfe");																					//Suche nach dem Talent "Sinnenschärfe"
		const SinnenschaerfeValue = (Sinnenschaerfe === undefined)? isNaN : (Sinnenschaerfe.system.value === null)? 0 : Sinnenschaerfe.system.value;							//Abrufen des TaW des Talents "Sinnenschärfe"
		const Wildnisleben = token.actor.items.find(item => item.name === "Wildnisleben");																						//Suche nach dem Talent "Wildnisleben"
		const WildnislebenValue = (Wildnisleben === undefined)? isNaN : (Wildnisleben.system.value === null)? 0 : Wildnisleben.system.value;									//Abrufen des TaW des Talents "Wildnisleben"
		const Sternkunde = token.actor.items.find(item => item.name === "Sternkunde");																						//Suche nach dem Talent "Sternkunde"
		const SternkundeValue = (Sternkunde === undefined)? isNaN : (Sternkunde.system.value === null)? 0 : Sternkunde.system.value;									//Abrufen des TaW des Talents "Sternkunde"
		const Rechnen = token.actor.items.find(item => item.name === "Rechnen");																								//Suche nach dem Talent "Rechnen"
		const RechnenValue = (Rechnen === undefined)? isNaN : (Rechnen.system.value === null)? 0 : Rechnen.system.value;														//Abrufen des TaW des Talents "Rechnen"
		const Tierkunde = token.actor.items.find(item => item.name === "Tierkunde");																							//Suche nach dem Talent "Tierkunde"
		const TierkundeValue = (Tierkunde === undefined)? isNaN : (Tierkunde.system.value === null)? 0 : Tierkunde.system.value;												//Abrufen des TaW des Talents "Tierkunde"

	//Metatalent "Wache halten"
		Wachehalten = Math.round((SelbstbeherrschungValue + 2 * SinnenschaerfeValue + 1)/3);																					//Berechnungsformel des MetaTalent "Wache halten" wie sie in der Helden-Software berechnet wird
		if(Wachehalten > (2* SelbstbeherrschungValue) || Wachehalten > 2* SinnenschaerfeValue){
			WachehaltenValue = Math.min((2* SelbstbeherrschungValue), (2* SinnenschaerfeValue));
		}else{
			WachehaltenValue = Wachehalten;
		}
//###############################################################################################################################################################################################################################################

    //allgemeine Dialogoptionen
		const hr = "<hr>";
		const divFlexStart = "<div style='display:flex'><span style='flex:1'>";
		const divFlexEnd = "</span></div>";
		const divInputNumber = "type='number' style='width:50px;float:right' value='";
		const divInputBox = "type='checkbox' style='width:70px;float:right' ";
		const divInputUnchecked = "/>";
		const divInputChecked = "checked />";
	
//###############################################################################################################################################################################################################################################    

//Dialoge
	//Die Nachtwache
	headerDialog = "<h2><b> Die Nachtwache </b><br></h2>";
    inputDialog = headerDialog;
	inputDialog += "Berechnung der Wachdauer<br>";
	    inputDialog += divFlexStart + `
            <form action"#">
                 <label for="SelectSchedule">Wie wird die Zeit berechnet? </label>
                 <select name="SelectSchedule" id="SelectSchedule" style="float:right">
					<option value="0">keine Hilfsmittel</option>
					<option value="1">Stundenglas/-kerzen</option>
					<option value="99">-----nur mit Wachfeuer-----</option>
					<option value="2">Anhand des Holzverbrauchs</option>
					<option value="99">-----nur bei klarem Himmel-----</option>
					<option value="3">Anhand der Sterne</option>
					<option value="99">-----ab 2 h Stunden vor Sonnenaufgang-----</option>
					<option value="4">Anhand der Tierstimmen</option>
					</select>
			</form>
        `+ divFlexEnd + hr;
	inputDialog += divFlexStart + "Wie viele Punkte Erschöpfung? <input id='exhausted'" + divInputNumber  + "0'/>" + divFlexEnd;
	inputDialog += divFlexStart + "Wie viele Stunde wird gewacht? <input id='Time'" + divInputNumber  + "0'/>" + divFlexEnd;
	inputDialog += divFlexStart + `
            <label for="checkCompany">Hat der Wachende Gesellschaft? </label><input type="checkbox" id="checkCompany" name="checkCompany" style="float:right">
        `+ divFlexEnd;
	inputDialog += divFlexStart + `
            <label for="checkADW">Alternierende Doppelwache? </label><input type="checkbox" id="checkADW" name="checkADW" style="float:right">
        `+ divFlexEnd
	inputDialog += divFlexStart + `
            <label for="checkFire">Muss ein Wachfeuer unterhalten werden? </label><input type="checkbox" id="checkFire" name="checkFire" style="float:right">
        `+ divFlexEnd;
    inputDialog += divFlexStart + `
            <form action"#">
                 <label for="SelectDarkness">Wie dunkel ist es? </label>
                 <select name="SelectDarkness" id="SelectDarkness" style="float:right">
                    <option value="0">totale Finternis (+1)</option>
					<option value="1" selected>keine Modifikation (+0)</option>
                    <option value="2">heller Mondschein (-1)</option>
                 </select>
            </form>
        `+ divFlexEnd;
    inputDialog += divFlexStart + `
            <form action"#">
                 <label for="SelectTension">Wie ist die Anspannung? </label>
                 <select name="SelectTension" id="SelectTension" style="float:right">
                    <option value="0">seit Tagen ist nichts passiert (+1)</option>
					<option value="1" selected>keine Modifikation (+0)</option>
                    <option value="2">es könnte jederzeit ein Angriff kommen (-1)</option>
                 </select>
            </form>
        `+ divFlexEnd;
    inputDialog += divFlexStart + `
            <form action"#">
                 <label for="SelectEncounter">Gab es besondere Vorkommnisse? </label>
                 <select name="SelectEncounter" id="SelectEncounter" style="float:right">
                    <option value="0">nichts zu hören, nichts zu sehen (+1)</option>
					<option value="1" selected>keine Modifikation (+0)</option>
                    <option value="2">ständig raschelt es im Unterholz (-1)</option>
                 </select>
            </form>
        `+ divFlexEnd;
    inputDialog += divFlexStart + `
            <form action"#">
                 <label for="SelectPosition">Wie ist die Haltung? </label>
                 <select name="SelectPosition" id="SelectPosition" style="float:right">
                    <option value="0">im Hinterhalt liegend (+1)</option>
					<option value="1" selected>keine Modifikation (+0)</option>
                    <option value="2">läuft die ganze Zeit umher (-1)</option>
                 </select>
            </form>
        `+ divFlexEnd + hr;
	inputDialog += divFlexStart + "Modifikator für zweite Probe: <input id='repetition'" + divInputNumber  + "0'/>" + divFlexEnd;
		

//###############################################################################################################################################################################################################################################	

//Probenwurf
	new Dialog({
        title: "Die Nachtwache",
        content: inputDialog + hr,
        buttons: {
            close: {
                icon: '<i class="fas fa-times"></i>', label: "Schließen"
            }, 
            accept: {
                icon: '<i class="fas fa-check"></i>', label: "Würfeln", callback: htmlCallback
            }  
        },
		default: "accept",
        render: () => console.log(),
        close: () => console.log()
    }).render(true);
	
    async function htmlCallback(html){
		
	//Input Boxes
		const exhaustedInput = Number(html.find("#exhausted")[0]?.value || 0);				
		const TimeInput = Number(html.find("#Time")[0]?.value || 0);				
		const DarknessInput = Number(html.find("#SelectDarkness")[0]?.value || 0);
		const TensionInput = Number(html.find("#SelectTension")[0]?.value || 0);
		const EncounterInput = Number(html.find("#SelectEncounter")[0]?.value || 0);
		const PositionInput = Number(html.find("#SelectPosition")[0]?.value || 0);
		const repetitionInput = Number(html.find("#repetition")[0]?.value || 0);
			repetitionMod = Math.abs(repetitionInput);
		const ScheduleInput = Number(html.find("#SelectSchedule")[0]?.value || 0);

    if(TimeInput === 0) {
        ui.notifications.error("Bitte eine Wachdauer eingeben.");
        return;
    };

	//Checkboxes
		const checkFireInput = html.find("#checkFire")[0].checked;		
				FireMod = (checkFireInput === true)? -5 : 0;				
		const checkCompanyInput = html.find("#checkCompany")[0].checked;	
				CompanyMod = (checkCompanyInput === true)? -1 : 0;	
		const checkADWInput = html.find("#checkADW")[0].checked;	
				ADWMod = (checkADWInput === true)? (CompanyMod * 3) : CompanyMod;	
				
	//Dropdown
		switch(DarknessInput){
            case 0:
				DarknessMod = 1;
				break;
            case 1:
				DarknessMod = 0;
				break;
            case 2:
				DarknessMod = -1;
				break;
        }

		switch(TensionInput){
            case 0:
				TensionMod = 1;
				break;
            case 1:
				TensionMod = 0;
				break;
            case 2:
				TensionMod = -1;
				break;
        }

		switch(EncounterInput){
            case 0:
				EncounterMod = 1;
				break;
            case 1:
				EncounterMod = 0;
				break;
            case 2:
				EncounterMod = -1;
				break;
        }

		switch(PositionInput){
            case 0:
				PositionMod = 1;
				break;
            case 1:
				PositionMod = 0;
				break;
            case 2:
				PositionMod = -1;
				break;
        }

		switch(ScheduleInput){
			case 0:
				add1_att1 = "";
				add1_att1_DE = "";
				add1_att2 = "";
				add1_att3 = "";
				add1_Talent = "";
				add1_TalentValue = "";
				add1_mod = "";
				add2_att1 = "";
				add2_att2 = "";
				add2_att3 = "";
				add2_Talent = "";
				add2_TalentValue = "";
				add2_mod = "";
				break;
			case 1:
				add1_att1 = "";
				add1_att1_DE = "";
				add1_att2 = "";
				add1_att3 = "";
				add1_Talent = "";
				add1_TalentValue = "";
				add1_mod = "";
				add2_att1 = "";
				add2_att2 = "";
				add2_att3 = "";
				add2_Talent = "";
				add2_TalentValue = "";
				add2_mod = "";
				break;
			case 2:
				add1_att1 = intuition;
				add1_att1_DE = "IN";
				add1_att2 = agility;
				add1_att2_DE = "GE";
				add1_att3 = constitution;
				add1_att3_DE = "KO";
				add1_Talent = "Wildnisleben";
				add1_TalentValue = WildnislebenValue;
				add1_mod = 10;
				add2_att1 = "";
				add2_att2 = "";
				add2_att3 = "";
				add2_Talent = "";
				add2_TalentValue = "";
				add2_mod = "";
				break;
			case 3:
				add1_att1 = cleverness;
				add1_att1_DE = "KL";
				add1_att2 = cleverness;
				add1_att2_DE = "KL";
				add1_att3 = intuition;
				add1_att3_DE = "IN";
				add1_Talent = "Sternkunde";
				add1_TalentValue = SternkundeValue;
				add1_mod = 0;
				add2_att1 = cleverness;
				add2_att1_DE = "KL";
				add2_att2 = cleverness;
				add2_att2_DE = "KL";
				add2_att3 = intuition;
				add2_att3_DE = "IN";
				add2_Talent = "Rechnen";
				add2_TalentValue = RechnenValue
				add2_mod = 0;
				break;
			case 4:
				add1_att1 = courage;
				add1_att1_DE = "KL";
				add1_att2 = cleverness;
				add1_att2_DE = "KL";
				add1_att3 = intuition;
				add1_att3_DE = "IN";
				add1_Talent = "Tierkunde";
				add1_TalentValue = TierkundeValue;
				add1_mod = 5;
				add2_att1 = "";
				add2_att2 = "";
				add2_att3 = "";
				add2_Talent = "";
				add2_TalentValue = "";
				add2_mod = "";
				break;				
        }
//Berechnung der Wachzeit
	//Roll the dice
        let TimeRoll = new Roll("6d20").roll({async: true});
        TimeRoll.then(roll =>{
			let add1_w1 = roll.terms[0].results[0].result;
			let add1_w2 = roll.terms[0].results[1].result;
			let add1_w3 = roll.terms[0].results[2].result;
			let add2_w1 = roll.terms[0].results[3].result;
			let add2_w2 = roll.terms[0].results[4].result;
			let add2_w3 = roll.terms[0].results[5].result;

	//Talente
		const add1_TaW = add1_TalentValue;
		const add2_TaW = add2_TalentValue;
			
			add1_modOutput = (add1_mod >=0)? "+" + add1_mod: add1_mod;
			add2_modOutput = (add2_mod >=0)? "+" + add2_mod: add2_mod;

			
			add1_eTaW = add1_TaW;
			add1_eTaWMod = add1_eTaW - add1_mod;
			add1_resOne = add1_att1 - add1_w1;
			add1_resOne += (add1_eTaWMod < 0)? add1_eTaWMod: 0;
			add1_resTwo = add1_att2 - add1_w2;
			add1_resTwo += (add1_eTaWMod < 0)? add1_eTaWMod: 0;
			add1_resThree = add1_att3 - add1_w3;
			add1_resThree += (add1_eTaWMod < 0)? add1_eTaWMod: 0;
			add1_TalentResult = (add1_eTaWMod > 0)? add1_eTaWMod : 0;
			add1_TalentResult += (add1_resOne < 0)? add1_resOne : 0;
			add1_TalentResult += (add1_resTwo < 0)? add1_resTwo : 0;
			add1_TalentResult += (add1_resThree < 0)? add1_resThree : 0;
			add1_TalentResult = (add1_TalentResult == 0)? 1 : add1_TalentResult;
			add1_TalentResult = Math.min(add1_TalentResult,add1_eTaW);

            add1_luck = (add1_TalentResult >= 0)? "Erfolg":"Misserfolg";
            add1_wSum1 = add1_w1 + add1_w2
            add1_wSum2 = add1_w1 + add1_w3
            add1_wSum3 = add1_w2 + add1_w3
            add1_wSum4 = add1_w1 + add1_w2 + add1_w3
            if(add1_wSum1 == 2 || add1_wSum2 == 2 || add1_wSum3 == 2){
                if(add1_wSum4 == 3){
                    add1_luck = "Spektakulärer Erfolg";
                }else{
                    add1_luck = "Glücklicher Erfolg";
                };
            };
            if(add1_wSum1 == 40 || add1_wSum2 == 40 || add1_wSum3 == 40){
                if(add1_wSum4 == 60){
                    add1_luck = "Spektakulärer Patzer";
                }else{
                    add1_luck = "Patzer";
                };
            };		

			add2_eTaW = add2_TaW;
			add2_eTaWMod = add2_eTaW - add2_mod;
			add2_resOne = add2_att1 - add2_w1;
			add2_resOne += (add2_eTaWMod < 0)? add2_eTaWMod: 0;
			add2_resTwo = add2_att2 - add2_w2;
			add2_resTwo += (add2_eTaWMod < 0)? add2_eTaWMod: 0;
			add2_resThree = add2_att3 - add2_w3;
			add2_resThree += (add2_eTaWMod < 0)? add2_eTaWMod: 0;
			add2_TalentResult = (add2_eTaWMod > 0)? add2_eTaWMod : 0;
			add2_TalentResult += (add2_resOne < 0)? add2_resOne : 0;
			add2_TalentResult += (add2_resTwo < 0)? add2_resTwo : 0;
			add2_TalentResult += (add2_resThree < 0)? add2_resThree : 0;
			add2_TalentResult = (add2_TalentResult == 0)? 1 : add2_TalentResult;
			add2_TalentResult = Math.min(add2_TalentResult,add2_eTaW);

            add2_luck = (add2_TalentResult >= 0)? "Erfolg":"Misserfolg";
            add2_wSum1 = add2_w1 + add2_w2
            add2_wSum2 = add2_w1 + add2_w3
            add2_wSum3 = add2_w2 + add2_w3
            add2_wSum4 = add2_w1 + add2_w2 + add2_w3
            if(add2_wSum1 == 2 || add2_wSum2 == 2 || add2_wSum3 == 2){
                if(add2_wSum4 == 3){
                    add2_luck = "Spektakulärer Erfolg";
                }else{
                    add2_luck = "Glücklicher Erfolg";
                };
            };
            if(add2_wSum1 == 40 || add2_wSum2 == 40 || add2_wSum3 == 40){
                if(add2_wSum4 == 60){
                    add2_luck = "Spektakulärer Patzer";
                }else{
                    add2_luck = "Patzer";
                };
            };			
		
		
//###############################################################################################################################################################################################################################################	

// Funktion zur Generierung einer normalverteilten Zufallszahl
	function generateNormalDistribution(mean, stdDev) {
    // Generiere eine Zufallszahl zwischen 0 und 1
		const u1 = Math.random();
		const u2 = Math.random();

    // Berechne die Standardnormalverteilung
		const z = Math.sqrt(-2 * Math.log(u1)) * Math.cos(2 * Math.PI * u2);

    // Skaliere die Zufallszahl auf den gewünschten Wertebereich
		const value = mean + stdDev * z;

    // Begrenze den Wertebereich auf 0 bis 2
		return Math.max(0, Math.min(2, value));
}

// Genereirung einer Zufallszahl mit Mittelwert (mean) 1 und Standardabweichung (stdDev) 0.5
	const randomValue = generateNormalDistribution(1, 0.5);
	console.log("Normalverteilte Zufallszahl:", randomValue);
	
//Die Wahrscheinlichkeit am Ende der Nachtwache einzuschlafen ist höher als am Anfang:
	if(randomValue > 1){
		WatchTimeMod = 2 - randomValue;
	}else{
		WatchTimeMod = randomValue
	}

//###############################################################################################################################################################################################################################################	

			if(ScheduleInput == 1 || ScheduleInput == 2){
				TimeMod = 1;
			}if(ScheduleInput == 2 || ScheduleInput == 4){
				if(add1_TalentResult > 0){
					TimeMod = 1;
				}else{
					TimeMod = randomValue;
				}
			}if(ScheduleInput == 3){
				if(add1_TalentResult > 0 && add2_TalentResult > 0){
					TimeMod = 1;
				}else{
					TimeMod = randomValue;
				}
			}if(ScheduleInput == 0){
				TimeMod = randomValue;
			}

		//Berechnung der tatsächlichen Wachdauer
			TimeMin = TimeInput * 60 * TimeMod;
			Time = TimeMin;
			Timehour = Math.round(Time/60);
			if(Time > 59){
				absTimeMin = Math.round(Time - (Timehour * 60));
			}else{
				absTimeMin = Math.round(Time);
			}
			if(Timehour > 1 && absTimeMin > 1){
				TimeOutput = "<b>" + Timehour + "</b> Stunden und <b>" + absTimeMin + "</b> Minuten";
			}if(Timehour > 1 && absTimeMin == 1){
				TimeOutput = "<b>" + Timehour + "</b> Stunden und <b>" + absTimeMin + "</b> Minute";
			}if(Timehour > 1 && absTimeMin == 0){
				TimeOutput = "<b>" + Timehour + "</b> Stunden";
			}if(Timehour == 1 && absTimeMin > 1){
				TimeOutput = "<b>" + Timehour + "</b> Stunde und <b>" + absTimeMin + "</b> Minuten";
			}if(Timehour == 1 && absTimeMin == 1){
				TimeOutput = "<b>" + Timehour + "</b> Stunde und <b>" + absTimeMin + "</b> Minute";
			}if(Timehour == 1 && absTimeMin == 0){
				TimeOutput = "<b>" + Timehour + "</b> Stunde";
			}if(Timehour == 0 && absTimeMin > 1){
				TimeOutput = "<b>" + absTimeMin + "</b> Minuten";
			}if(Timehour == 0 && absTimeMin == 1){
				TimeOutput = "<b>" + absTimeMin + "</b> Minute";
			}

		//Berechnung der Einschlafzeit
			SleepTimeMin = TimeInput * 60 * WatchTimeMod;
			SleepTime = Math.round(Math.random() * SleepTimeMin);
			SleepTimehour = Math.round(Time/60);
			if(SleepTime > 59){
				absSleepTimeMin = Math.round(SleepTime - (SleepTimehour * 60));
			}else{
				absSleepTimeMin = Math.round(SleepTime);
			}
			if(SleepTimehour > 1 && absSleepTimeMin > 1){
				SleepTimeOutput = "<b>" + SleepTimehour + "</b> Stunden und <b>" + absSleepTimeMin + "</b> Minuten";
			}if(SleepTimehour > 1 && absSleepTimeMin == 1){
				SleepTimeOutput = "<b>" + SleepTimehour + "</b> Stunden und <b>" + absSleepTimeMin + "</b> Minute";
			}if(SleepTimehour > 1 && absSleepTimeMin == 0){
				SleepTimeOutput = "<b>" + SleepTimehour + "</b> Stunden";
			}if(SleepTimehour == 1 && absSleepTimeMin > 1){
				SleepTimeOutput = "<b>" + SleepTimehour + "</b> Stunde und <b>" + absSleepTimeMin + "</b> Minuten";
			}if(SleepTimehour == 1 && absSleepTimeMin == 1){
				SleepTimeOutput = "<b>" + SleepTimehour + "</b> Stunde und <b>" + absSleepTimeMin + "</b> Minute";
			}if(SleepTimehour == 1 && absSleepTimeMin == 0){
				SleepTimeOutput = "<b>" + SleepTimehour + "</b> Stunde";
			}if(SleepTimehour == 0 && absSleepTimeMin > 1){
				SleepTimeOutput = "<b>" + absSleepTimeMin + "</b> Minuten";
			}if(SleepTimehour == 0 && absSleepTimeMin == 1){
				SleepTimeOutput = "<b>" + absSleepTimeMin + "</b> Minute";
			}

//Talentwurf		
	//Roll the dice
        let TalentRoll = new Roll("3d20").roll({async: true});
        TalentRoll.then(roll =>{
			let w1 = roll.terms[0].results[0].result;
			let w2 = roll.terms[0].results[1].result;
			let w3 = roll.terms[0].results[2].result;

	//Talent
		const TaW = WachehaltenValue;
			
			mod = exhaustedInput + Math.round(Time / 60) + FireMod + DarknessMod + TensionMod + EncounterMod + PositionMod + Math.min(ADWMod, CompanyMod) - repetitionMod
			modOutput = (mod >=0)? "+" + mod: mod;
			
			eTaW = TaW;
			eTaWMod = eTaW - mod;
			resOne = courage - w1;
			resOne += (eTaWMod < 0)? eTaWMod: 0;
			resTwo = intuition - w2;
			resTwo += (eTaWMod < 0)? eTaWMod: 0;
			resThree = dexterity - w3;
			resThree += (eTaWMod < 0)? eTaWMod: 0;
			TalentResult = (eTaWMod > 0)? eTaWMod : 0;
			TalentResult += (resOne < 0)? resOne : 0;
			TalentResult += (resTwo < 0)? resTwo : 0;
			TalentResult += (resThree < 0)? resThree : 0;
			TalentResult = (TalentResult == 0)? 1 : TalentResult;
			TalentResult = Math.min(TalentResult,eTaW);

            luck = (TalentResult >= 0)? "Erfolg":"Misserfolg";
            wSum1 = w1 + w2
            wSum2 = w1 + w3
            wSum3 = w2 + w3
            wSum4 = w1 + w2 + w3
            if(wSum1 == 2 || wSum2 == 2 || wSum3 == 2){
                if(wSum4 == 3){
                    luck = "Spektakulärer Erfolg";
                }else{
                    luck = "Glücklicher Erfolg";
                };
            };
            if(wSum1 == 40 || wSum2 == 40 || wSum3 == 40){
                if(wSum4 == 60){
                    luck = "Spektakulärer Patzer";
                }else{
                    luck = "Patzer";
                };
            };

		//Chat Output
            flavor = "<b> Die Nachtwache </b><br>";
			flavor += "<u>Wache halten</u><br>";
			flavor += "<b>MU</b>: " + w1 + "/" + "<b>" + courage + "</b>" + " (" + resOne + ")";
			flavor += "<br><b>IN</b>: " + w2 + "/" + "<b>" + intuition + "</b>" + " (" + resTwo + ")";
			flavor += "<br><b>FF</b>: " + w3 + "/" + "<b>" + dexterity + "</b>" + " (" + resThree + ")";
			flavor += "<br>TaW / Modifikation: " + eTaW + " / " + modOutput;
			flavor += "<br>TaP*: " + TalentResult + " (" + luck + ")" + "<br>";
			if(ScheduleInput == 2 || ScheduleInput == 3 || ScheduleInput == 4){			
				flavor += "<u>" + add1_Talent + "</u><br>";
				flavor += "<b>" + add1_att1_DE + "</b>: " + add1_w1 + "/" + "<b>" + add1_att1 + "</b>" + " (" + add1_resOne + ")";
				flavor += "<br><b>" + add1_att2_DE + "</b>: " + add1_w2 + "/" + "<b>" + add1_att2 + "</b>" + " (" + add1_resTwo + ")";
				flavor += "<br><b>" + add1_att3_DE + "</b>: " + add1_w3 + "/" + "<b>" + add1_att3 + "</b>" + " (" + add1_resThree + ")";
				flavor += "<br>TaW / Modifikation: " + add1_eTaW + " / " + add1_modOutput;
				flavor += "<br>TaP*: " + add1_TalentResult + " (" + add1_luck + ")" + "<br>";
			}
			if(ScheduleInput == 3){			
				flavor += "<u>" + add2_Talent + "</u><br>";
				flavor += "<b>" + add2_att1_DE + "</b>: " + add2_w1 + "/" + "<b>" + add2_att1 + "</b>" + " (" + add2_resOne + ")";
				flavor += "<br><b>" + add2_att2_DE + "</b>: " + add2_w2 + "/" + "<b>" + add2_att2 + "</b>" + " (" + add2_resTwo + ")";
				flavor += "<br><b>" + add2_att3_DE + "</b>: " + add2_w3 + "/" + "<b>" + add2_att3 + "</b>" + " (" + add2_resThree + ")";
				flavor += "<br>TaW / Modifikation: " + add2_eTaW + " / " + add2_modOutput;
				flavor += "<br>TaP*: " + add2_TalentResult + " (" + add2_luck + ")" + "<br>";
			}
			if(TalentResult > -1){
				flavor += "Es mag mühsam sein, aber " + tokenName + " bleibt wach, bis die Wache vorbei ist. <br>";
				if(TimeMod == 1){
					flavor += tokenName + " kann die Zeit richtig einschätzen und weckt die Ablösung pünktlich nach " + TimeOutput;
				}if(TimeMod < 1){
					flavor += tokenName + " schätzt die Wachdauer falsch ein und weckt die Ablösung bereits nach " + TimeOutput;
				}if(TimeMod > 1){
					flavor += tokenName + " schätzt die Wachdauer falsch ein und weckt die Ablösung erst nach " + TimeOutput;
				}
			}if(TalentResult == -1 || TalentResult == -2 || TalentResult == -3){
				flavor += tokenName + " ertappt sich nach " + SleepTimeOutput + " beim Sekundenschlaf. Wenn " + tokenName + " nichts dagegen unternimmt (herumlaufen, sich irgendwie beschäftigen), wird der Schlaf beim nächsten Mal tiefer sein."
				flavor += "<br>Die Probe kann um <b>" + Math.abs(TalentResult) + "</b> erschwert wiederholt werden.";
			}if(TalentResult == -4 || TalentResult == -5 || TalentResult == -6 || TalentResult == -7){
				flavor += tokenName + " schläft nach " + SleepTimeOutput + " ein und schreckt erst nach <b>" + (2 + Math.round(Math.random() * 10)) + "</b> Minuten wieder hoch. Wenn " + tokenName + " nichts dagegen unternimmt (herumlaufen, sich irgendwie beschäftigen), wird der Schlaf beim nächsten Mal tiefer sein."
				flavor += "<br>Die Probe kann um <b>" + Math.abs(TalentResult) + "</b> erschwert wiederholt werden.";
			}if(TalentResult < -7 || (repetitionMod > 0 && TalentResult < 0)){
				flavor += tokenName + " schlummert nach " + SleepTimeOutput + " tief und fest und wird vermutlich am Morgen von einem schlecht gelaunten Gefährten geweckt. <br> Ob in den Zeiten, in denen die Wache schläft, irgendetwas passiert, bleibt der meisterlichen Gnade überlassen.";
			}
			
            roll.toMessage ({
                flavor: flavor,
                speaker: ChatMessage.getSpeaker({token: token.document})
            },
            {rollMode: CONST.DICE_ROLL_MODES.BLIND}
            );
        })});
	}
}		   
