//Skript für die Nachtwache

main();
async function main() {
   
	
	//Abrufen des hinterlegten Würfelsystems
    const rollMode = game.settings.get('core', 'rollMode');


//###############################################################################################################################################################################################################################################

	//Name des gewählten Helden
		const tokenName = token.actor.name;

	//Eigenschaften des Helden	
		const courage = token.actor.system.base.basicAttributes.courage.value;																									//Mut				MU
		const cleverness = token.actor.system.base.basicAttributes.cleverness.value;																							//Klugheit			KL
		const intuition = token.actor.system.base.basicAttributes.intuition.value;																								//Intuition			IN
		const charisma = token.actor.system.base.basicAttributes.charisma.value;																								//Charisma			CH
		const dexterity = token.actor.system.base.basicAttributes.dexterity.value;																								//Fingerfertigkeit	FF
		const agility = token.actor.system.base.basicAttributes.agility.value;																									//Gewandheit		GE
		const constitution = token.actor.system.base.basicAttributes.constitution.value;																						//Konstitution		KO
		const strength = token.actor.system.base.basicAttributes.strength.value;																								//Körperkraft		KK
		const magicResistance = token.actor.system.base.combatAttributes.passive.magicResistance.value; 																		//Magieresistenz	MR
		const astralEnergy = token.actor.system.base.resources.astralEnergy.value;																								//Astralenergie		AE

	//Talente des Helden
		const Selbstbeherrschung = token.actor.items.find(item => item.name === "Selbstbeherrschung");																			//Suche nach dem Talent "Selbstbeherrschung"
		const SelbstbeherrschungValue = (Selbstbeherrschung === undefined)? isNaN : (Selbstbeherrschung.system.value === null)? 0 : Selbstbeherrschung.system.value;			//Abrufen des TaW des Talents "Selbstbeherrschung"	//Vor und Nachteile des Helden
		const Sinnenschaerfe = token.actor.items.find(item => item.name === "Sinnenschärfe");																					//Suche nach dem Talent "Sinnenschärfe"	//Sonderfertigkeiten des Helden
		const SinnenschaerfeValue = (Sinnenschaerfe === undefined)? isNaN : (Sinnenschaerfe.system.value === null)? 0 : Sinnenschaerfe.system.value;							//Abrufen des TaW des Talents "Sinnenschärfe"

	//Metatalent "Wache halten"
		Wachehalten = Math.round((SelbstbeherrschungValue + 2 * SinnenschaerfeValue + 1)/3);																					//Berechnungsformel des MetaTalent "Wache halten" wie sie in der Helden-Software berechnet wird
		if(Wachehalten > (2* SelbstbeherrschungValue) || Wachehalten > 2* SinnenschaerfeValue){
			WachehaltenValue = Math.min((2* SelbstbeherrschungValue), (2* SinnenschaerfeValue));
		}else{
			WachehaltenValue = Wachehalten;
		}
//###############################################################################################################################################################################################################################################

    //allgemeine Dialogoptionen
		const hr = "<hr>";
		const divFlexStart = "<div style='display:flex'><span style='flex:1'>";
		const divFlexEnd = "</span></div>";
		const divInputNumber = "type='number' style='width:50px;float:right' value='";
		const divInputBox = "type='checkbox' style='width:70px;float:right' ";
		const divInputUnchecked = "/>";
		const divInputChecked = "checked />";
	
//###############################################################################################################################################################################################################################################    

//Dialoge
	//Die Nachtwache
	headerDialog = "<h2><b> Die Nachtwache </b><br></h2>";
    inputDialog = headerDialog;
	inputDialog += divFlexStart + "Wie viele Punkte Erschöpfung? <input id='exhaust'" + divInputNumber  + "0'/>" + divFlexEnd;
	inputDialog += divFlexStart + "Wie viele Stunde wird gewacht? <input id='Time'" + divInputNumber  + "0'/>" + divFlexEnd;
	inputDialog += divFlexStart + `
            <label for="checkCompany">Hat der Wachende Gesellschaft? </label><input type="checkbox" id="checkCompany" name="checkCompany" style="float:right">
        `+ divFlexEnd;
	inputDialog += divFlexStart + `
            <label for="checkADW">Alternierende Doppelwache? </label><input type="checkbox" id="checkADW" name="checkADW" style="float:right">
        `+ divFlexEnd
	inputDialog += divFlexStart + `
            <label for="checkFire">Muss ein Wachfeuer unterhalten werden? </label><input type="checkbox" id="checkFire" name="checkFire" style="float:right">
        `+ divFlexEnd;
    inputDialog += divFlexStart + `
            <form action"#">
                 <label for="SelectDarkness">Wie dunkel ist es? </label>
                 <select name="SelectDarkness" id="SelectDarkness" style="float:right">
                    <option value="0">totale Finternis (+1)</option>
					<option value="1" selected>keine Modifikation (+0)</option>
                    <option value="2">heller Mondschein (-1)</option>
                 </select>
            </form>
        `+ divFlexEnd
    inputDialog += divFlexStart + `
            <form action"#">
                 <label for="SelectTension">Wie ist die Anspannung? </label>
                 <select name="SelectTension" id="SelectTension" style="float:right">
                    <option value="0">seit Tagen ist nichts passiert (+1)</option>
					<option value="1" selected>keine Modifikation (+0)</option>
                    <option value="2">es könnte jederzeit ein Angriff kommen (-1)</option>
                 </select>
            </form>
        `+ divFlexEnd
    inputDialog += divFlexStart + `
            <form action"#">
                 <label for="SelectEncounter">Gab es besondere Vorkommnisse? </label>
                 <select name="SelectEncounter" id="SelectEncounter" style="float:right">
                    <option value="0">nichts zu hören, nichts zu sehen (+1)</option>
					<option value="1" selected>keine Modifikation (+0)</option>
                    <option value="2">ständig raschelt es im Unterholz (-1)</option>
                 </select>
            </form>
        `+ divFlexEnd
    inputDialog += divFlexStart + `
            <form action"#">
                 <label for="SelectPosition">Wie ist die Haltung? </label>
                 <select name="SelectPosition" id="SelectPosition" style="float:right">
                    <option value="0">im Hinterhalt liegend (+1)</option>
					<option value="1" selected>keine Modifikation (+0)</option>
                    <option value="2">läuft die ganze Zeit umher (-1)</option>
                 </select>
            </form>
        `+ divFlexEnd + hr;
	inputDialog += divFlexStart + "Modifikator für zweite Probe: <input id='repetition'" + divInputNumber  + "0'/>" + divFlexEnd;
		


//###############################################################################################################################################################################################################################################	

//Probenwurf
	new Dialog({
        title: "Die Nachtwache",
        content: inputDialog + hr,
        buttons: {
            close: {
                icon: '<i class="fas fa-times"></i>', label: "Schließen"
            }, 
            accept: {
                icon: '<i class="fas fa-check"></i>', label: "Würfeln", callback: htmlCallback
            }  
        },
		default: "accept",
        render: () => console.log(),
        close: () => console.log()
    }).render(true);
	
    async function htmlCallback(html){
		
	//Input Boxes
		const exhaustInput = Number(html.find("#exhaust")[0]?.value || 0);				
		const TimeInput = Number(html.find("#Time")[0]?.value || 0);				
		const DarknessInput = Number(html.find("#SelectDarkness")[0]?.value || 0);
		const TensionInput = Number(html.find("#SelectTension")[0]?.value || 0);
		const EncounterInput = Number(html.find("#SelectEncounter")[0]?.value || 0);
		const PositionInput = Number(html.find("#SelectPosition")[0]?.value || 0);
		const repetitionInput = Number(html.find("#repetition")[0]?.value || 0);
			repetitionMod = Math.abs(repetitionInput);

	//Checkboxes
		const checkFireInput = html.find("#checkFire")[0].checked;		
				FireMod = (checkFireInput === true)? -5 : 0;				
		const checkCompanyInput = html.find("#checkCompany")[0].checked;	
				CompanyMod = (checkCompanyInput === true)? -1 : 0;	
		const checkADWInput = html.find("#checkADW")[0].checked;	
				ADWMod = (checkADWInput === true)? (CompanyMod * 3) : CompanyMod;	
				
	//Dropdown
		switch(DarknessInput){
            case 0:
				DarknessMod = 1;
				break;
            case 1:
				DarknessMod = 0;
				break;
            case 2:
				DarknessMod = -1;
				break;
        }

		switch(TensionInput){
            case 0:
				TensionMod = 1;
				break;
            case 1:
				TensionMod = 0;
				break;
            case 2:
				TensionMod = -1;
				break;
        }

		switch(EncounterInput){
            case 0:
				EncounterMod = 1;
				break;
            case 1:
				EncounterMod = 0;
				break;
            case 2:
				EncounterMod = -1;
				break;
        }

		switch(PositionInput){
            case 0:
				PositionMod = 1;
				break;
            case 1:
				PositionMod = 0;
				break;
            case 2:
				PositionMod = -1;
				break;
        }

		
	//Roll the dice
        let spellRoll = new Roll("3d20").roll({async: true});
        spellRoll.then(roll =>{
			let w1 = roll.terms[0].results[0].result;
			let w2 = roll.terms[0].results[1].result;
			let w3 = roll.terms[0].results[2].result;

	//Talent
		const TaW = WachehaltenValue;
			
			mod = exhaustInput + TimeInput + FireMod + DarknessMod + TensionMod + EncounterMod + PositionMod + Math.min(ADWMod, CompanyMod) - repetitionMod
			modOutput = (mod >=0)? "+" + mod: mod;
			
			eTaW = TaW;
			eTaWMod = eTaW - mod;
			resOne = courage - w1;
			resOne += (eTaWMod < 0)? eTaWMod: 0;
			resTwo = intuition - w2;
			resTwo += (eTaWMod < 0)? eTaWMod: 0;
			resThree = dexterity - w3;
			resThree += (eTaWMod < 0)? eTaWMod: 0;
			TalentResult = (eTaWMod > 0)? eTaWMod : 0;
			TalentResult += (resOne < 0)? resOne : 0;
			TalentResult += (resTwo < 0)? resTwo : 0;
			TalentResult += (resThree < 0)? resThree : 0;
			TalentResult = (TalentResult == 0)? 1 : TalentResult;
			TalentResult = Math.min(TalentResult,eTaW);

            luck = (TalentResult >= 0)? "Erfolg":"Misserfolg";
            wSum1 = w1 + w2
            wSum2 = w1 + w3
            wSum3 = w2 + w3
            wSum4 = w1 + w2 + w3
            if(wSum1 == 2 || wSum2 == 2 || wSum3 == 2){
                if(wSum4 == 3){
                    luck = "Spektakulärer Erfolg";
                }else{
                    luck = "Glücklicher Erfolg";
                };
            };
            if(wSum1 == 40 || wSum2 == 40 || wSum3 == 40){
                if(wSum4 == 60){
                    luck = "Spektakulärer Patzer";
                }else{
                    luck = "Patzer";
                };
            };

		//Berechnung der Zeit
			TimeMin = TimeInput * 60;
			Time = Math.round(Math.random() * TimeMin);
			Timehour = Math.round(Time/60);
			if(Time > 59){
				TimeMin2 = Time - (Timehour * 60);
			}else{
				TimeMin2 = Time;
			}
			if(Timehour > 1 && TimeMin2 > 1){
				TimeOutput = "<b>" + Timehour + "</b> Stunden und <b>" + TimeMin2 + "</b> Minuten";
			}if(Timehour > 1 && TimeMin2 == 1){
				TimeOutput = "<b>" + Timehour + "</b> Stunden und <b>" + TimeMin2 + "</b> Minute";
			}if(Timehour > 1 && TimeMin2 == 0){
				TimeOutput = "<b>" + Timehour + "</b> Stunden";
			}if(Timehour == 1 && TimeMin2 > 1){
				TimeOutput = "<b>" + Timehour + "</b> Stunde und <b>" + TimeMin2 + "</b> Minuten";
			}if(Timehour == 1 && TimeMin2 == 1){
				TimeOutput = "<b>" + Timehour + "</b> Stunde und <b>" + TimeMin2 + "</b> Minute";
			}if(Timehour == 1 && TimeMin2 == 0){
				TimeOutput = "<b>" + Timehour + "</b> Stunde";
			}if(Timehour == 0 && TimeMin2 > 1){
				TimeOutput = "<b>" + TimeMin2 + "</b> Minuten";
			}if(Timehour == 0 && TimeMin2 == 1){
				TimeOutput = "<b>" + TimeMin2 + "</b> Minute";
			}


		//Chat Output
            flavor = "<b> Die Nachtwache </b><br>";
			flavor += "<b>MU</b>: " + w1 + "/" + "<b>" + courage + "</b>" + " (" + resOne + ")";
			flavor += "<br><b>IN</b>: " + w2 + "/" + "<b>" + intuition + "</b>" + " (" + resTwo + ")";
			flavor += "<br><b>FF</b>: " + w3 + "/" + "<b>" + dexterity + "</b>" + " (" + resThree + ")";
			flavor += "<br>TaW / Modifikation: " + eTaW + " / " + modOutput;
			flavor += "<br>TaP*: " + TalentResult + " (" + luck + ")" + "<br>";
			if(TalentResult > -1){
				flavor += "Es mag mühsam sein, aber " + tokenName + " bleibt wach, bis die Wache vorbei ist.";
			}if(TalentResult == -1 || TalentResult == -2 || TalentResult == -3){
				flavor += tokenName + " ertappt sich nach " + TimeOutput + " beim Sekundenschlaf. Wenn " + tokenName + " nichts dagegen unternimmt (herumlaufen, sich irgendwie beschäftigen), wird er/sie tiefer einschlafen.<br>Die Probe kann um " + Math.abs(TalentResult) + " erschwert wiederholt werden.";
			}if(TalentResult == -4 || TalentResult == -5 || TalentResult == -6){
				flavor += tokenName + " schläft nach " + TimeOutput + " ein und schreckt erst nach 5 bis 15 Minuten wieder hoch. Wenn " + tokenName + " nichts dagegen unternimmt (herumlaufen, sich irgendwie beschäftigen), wird er/sie tiefer einschlafen.<br>Die Probe kann um " + Math.abs(TalentResult) + " erschwert wiederholt werden.";
			}if(TalentResult < -7 || (repetitionMod > 0 && TalentResult < 0)){
				flavor += tokenName + " schlummert nach " + TimeOutput + " tief und fest und wird vermutlich am Morgen von einem schlecht gelaunten Gefährten geweckt. <br> Ob in den Zeiten, in denen die Wache schläft, irgendetwas passiert, bleibt der meisterlichen Gnade überlassen.";
			}
			
            roll.toMessage ({
                flavor: flavor,
                speaker: ChatMessage.getSpeaker({token: token.document})
            },
            {rollMode: CONST.DICE_ROLL_MODES.BLIND}
            );
        });
	}
}		   
